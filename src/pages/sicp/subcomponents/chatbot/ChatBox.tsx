import { Buffer as NodeBuffer } from 'buffer';
import { OpenAI } from 'openai';
import * as React from 'react';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vs } from 'react-syntax-highlighter/dist/esm/styles/prism';
import Constants from 'src/commons/utils/Constants';

import SICPNotes from './SicpNotes';

Buffer.from('anything', 'base64');

if (!(window as any).Buffer) {
  (window as any).Buffer = NodeBuffer;
}

interface ChatBoxProps {
  getChapter: () => string;
  getText: () => string;
}

const ChatBox: React.FC<ChatBoxProps> = ({ getChapter, getText }) => {
  const chatRef = React.useRef<HTMLDivElement | null>(null);
  const key = Constants.chatGptKey;
  const [isLoading, setIsLoading] = React.useState(false);
  const [messages, setMessages] = React.useState<{ role: 'user' | 'bot'; content: string[] }[]>([
    { content: ['Ask me something about this paragraph!'], role: 'bot' }
  ]);
  const [userInput, setUserInput] = React.useState<string>('');
  // Use temp and conversation to make sure both student's query and response can be displayed
  // because of the asynchronous function
  const [temp, setTemp] = React.useState<string>('');
  const [conversation, setConversation] = React.useState<string>('');
  const [history, setHistory] = React.useState<string>('');

  const openai = new OpenAI({
    apiKey: key,
    dangerouslyAllowBrowser: true
  });

  const handleUserInput = (event: React.ChangeEvent<HTMLInputElement>) => {
    setUserInput(event.target.value);
  };

  // To get code snippets
  const codeBlocks = (temp: string) => {
    return temp.split('```');
  };

  function getPrompt() {
    const text = getText();
    const prompt =
      'You are a competent tutor, assisting a student who is learning computer science following the textbook "Structure and Interpretation of Computer Programs,' +
      'JavaScript edition". The student request is about a paragraph of the book. The request may be a follow-up request to a request that was posed to you' +
      'previously.\n' +
      'What follows are:\n' +
      '(1) the summary of chapter (2) the full paragraph, (3) the history of previous questions. Please answer the student request,' +
      'not the requests of the history. If the student request is not related to the book, ask them to ask questions that are related to the book. Donot say that I provide you text\n\n' +
      '\n(1) Here is the summary of this chapter:\n' +
      SICPNotes[getChapter()] +
      '\n(2) Here is the paragraph:\n' +
      text +
      '\n(3) Here is the history\n' +
      history;
    return prompt;
  }

  const sendMessage = () => {
    if (userInput.trim() !== '') {
      const blocks = codeBlocks(userInput);
      setMessages([...messages, { role: 'user', content: blocks }]);
      setConversation(userInput); // To trigger the function to send request to gpt
      setHistory(his => `${his}\n${userInput}`);
      setUserInput('');
    }
  };

  const cleanMessage = () => {
    setMessages([{ content: ['Ask me something about this paragraph!'], role: 'bot' }]);
    setHistory('');
  };

  const getResponse = async (userInput: string) => {
    const prompt = getPrompt();
    try {
      const response = await openai.chat.completions.create({
        messages: [
          { role: 'system', content: prompt },
          { role: 'user', content: userInput }
        ],
        model: 'gpt-4'
      });
      setTemp(response.choices[0]?.message['content'] || '');
    } catch (error) {
      setIsLoading(false);
      setMessages([...messages, { content: [`Error: ${error.message}`], role: 'bot' }]);
    }
  };

  React.useEffect(() => {
    if (conversation.trim() !== '') {
      getResponse(conversation);
      setIsLoading(true);
      setConversation('');
    }
  }, [conversation]);

  React.useEffect(() => {
    if (temp.trim() !== '') {
      // Split the response into code blocks
      setIsLoading(false);
      const blocks = codeBlocks(temp + '\n\nThe answer is generated by GPT-4');
      setMessages([...messages, { content: blocks, role: 'bot' }]);
    }
  }, [temp]);

  const keyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter') {
      sendMessage();
    }
  };

  React.useEffect(() => {
    scrollToBottom();
  }, [messages, isLoading]);

  const scrollToBottom = () => {
    chatRef.current?.scrollTo({ top: chatRef.current?.scrollHeight });
  };

  return (
    <div className="chat-container">
      <div className="chat-message" ref={chatRef}>
        {messages.map((message, index) => (
          <div key={index} className={`message ${message.role}`} style={{ whiteSpace: 'pre-line' }}>
            {Array.isArray(message.content)
              ? message.content.map((block, index) =>
                  // Assume that only javascript code snippets will appear
                  block.substring(0, 10) === 'javascript' ? (
                    <SyntaxHighlighter language="javascript" style={vs} key={index}>
                      {block}
                    </SyntaxHighlighter>
                  ) : (
                    block
                  )
                )
              : message.content}
          </div>
        ))}
        {isLoading && <p>loading...</p>}
      </div>
      <input
        type="text"
        className="user-input"
        placeholder="Type your message here..."
        value={userInput}
        onChange={handleUserInput}
        onKeyDown={keyDown}
      />
      <div className="button-container">
        <button className="button-send" onClick={sendMessage}>
          Send
        </button>
        <button className="button-clean" onClick={cleanMessage}>
          Clean
        </button>
      </div>
    </div>
  );
};

export default ChatBox;
